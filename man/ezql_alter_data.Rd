% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql.R
\name{ezql_alter_data}
\alias{ezql_alter_data}
\title{Update Data in a SQL Table}
\usage{
ezql_alter_data(
  df,
  table,
  breakdown = NULL,
  schema = NULL,
  database = NULL,
  address = NULL
)
}
\arguments{
\item{df}{A data frame containing the data to update.}

\item{table}{A string specifying the name of the target SQL table.}

\item{breakdown}{A tibble returned by \code{ezql_check_table()} with pre-validated data.
Defaults to \code{NULL}, and validation is performed within the function.}

\item{schema}{A string specifying the schema of the table. Defaults to the value
retrieved from \code{ezql_details_schema()}.}

\item{database}{A string specifying the database name. Defaults to the value
retrieved from \code{ezql_details_db()}.}

\item{address}{A string specifying the server address. Defaults to the value
retrieved from \code{ezql_details_add()}.}
}
\value{
No return value. This function is called for its side effects of updating
rows in the specified SQL table. If no rows are updated, a message is printed.
}
\description{
Updates rows in a specified SQL table using a data frame. Ensures the data
frame matches the table structure and updates only rows that differ.
}
\details{
If \code{breakdown} is provided, the function assumes that the data frame has
already been validated. Otherwise, it runs \code{ezql_check_table()} to validate
the input.
}
\examples{
\dontrun{
# Update rows in a table
ezql_alter_data(
  df = updated_data,
  table = "my_table",
  schema = "dbo",
  database = "my_database",
  address = "my_server"
)
}

}
\seealso{
\code{\link{ezql_check_table}}
}
